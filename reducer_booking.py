# -*- coding: utf-8 -*-
"""reducer_booking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w_Q6loRxK4D55_2I5fD9meQ_fQPXHQ3I
"""

from contextlib import nullcontext
# -*- coding: utf-8 -*-
"""reducer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YzJ-vUsO5VYCyMrfPMow3s2IdxXkyQ0i
"""

from operator import itemgetter
import sys
import pandas as pd

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import sklearn as sk
import datetime
import seaborn as sns
from datetime import date



f_age = open("age.txt", "w") 
f_age.write(f"age\n") 
# #new dataframe
# f = open("after_cleaning.txt", "w") 
# f.write(f"date_account_created") 
# f.write(f",")
# f.write(f"timestamp_first_active")
# f.write(f",")
# f.write(f"gender")
# f.write(f",")
# f.write(f"age")
# f.write(f",")
# f.write(f"signup_method")
# f.write(f",")
# f.write(f"signup_flow")
# f.write(f",")
# f.write(f"language")
# f.write(f",")
# f.write(f"affiliate_channel")
# f.write(f",")
# f.write(f"affiliate_provider")
# f.write(f",")
# f.write(f"first_affiliate_tracked")
# f.write(f",")
# f.write(f"signup_app")
# f.write(f",")
# f.write(f"first_device_type")
# f.write(f",")
# f.write(f"first_browser")
# f.write(f",")
# f.write(f"country_destination")
# f.write(f",")
# f.write(f"time_year")
# f.write(f",")
# f.write(f"time_month")
# f.write(f",")
# f.write(f"time_day")
# f.write(f",")
# f.write(f"time_weekday")
# f.write(f",")
# f.write(f"time_season\n")

# input comes from STDIN
print("Start Reducer....")

for line in sys.stdin:
    # remove leading and trailing whitespace
    line = line.strip()
    # parse the input we got from mapper.py
    key, line = line.split('\t', 1)    
    feats = line.split(",")   

    if feats[5] == "age":
      continue
    if not feats[5] :
      x=-1
      f_age.write(f"{int(x)}\n")
    else:
      x = feats[5]
      f_age.write(f"{int(x)}\n")
    

    
f_age.close() 

age_before = pd.read_csv("age.txt", delimiter = ',') 
# store dataframe into csv file
age_before.to_csv('age_before.csv',index = None)



#Fill NAN values and deal with age diffrent values and outlier -> replace with -1
def divide_age(age):
  if(np.logical_and(age<2000, age>1930)):
    age =2022-age
  if(np.logical_and(age<25, age>=15)):
    return 20
  elif (np.logical_and(age<25, age>=15)):
    return 20
  elif (np.logical_and(age<35, age>=25)):
    return 30 
  elif (np.logical_and(age<45, age>=35)):
    return 40
  elif (np.logical_and(age<55, age>=45)):
    return 50
  elif (np.logical_and(age<65, age>=55)):
    return 60
  elif (np.logical_and(age<75, age>=65)):
    return 70
  elif (np.logical_and(age<85, age>=75)):
    return 80
  else:
    return -1


#for train data
train_age = pd.read_csv('age_before.csv', index_col=None)

# train_age.age = train_age.age.fillna(-1)
all_ages = train_age.age 
ages_values = all_ages.values


ages_values = [int(i) for i in ages_values]
# ages_values = np.where(np.logical_and(ages_values<2000, ages_values>1930), 2022-ages_values, ages_values) 
# train_age["age"] = ages_values
train_age["age"]= np.array([ divide_age(i) for i in all_ages ])



#ouput the data after cleaning
################# train_age.to_csv('age_after.csv',index = None)
train = pd.read_csv('train.csv', index_col=None)
train = train.drop(["timestamp_first_active"],axis=1)
train["age_new"] = train_age["age"]
#train = train.drop(["age"],axis=1)
train.to_csv('final_train.csv',index = None)  
print(train)